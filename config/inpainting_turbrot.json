{
    "name": "inpainting_turbrot", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
        // "resume_state": "experiments/train_inpainting_turbrot_230829_131743/checkpoint/720" // hybrid
        // "resume_state": "experiments/train_inpainting_turbrot_231031_110544/checkpoint/740" // center8
        // "resume_state": "experiments/train_inpainting_turbrot_231101_114225/checkpoint/730" // center16
        // "resume_state": "experiments/train_inpainting_turbrot_231102_113332/checkpoint/730" // center24
        // "resume_state": "experiments/train_inpainting_turbrot_231102_114608/checkpoint/750" // center32
        "resume_state": "experiments/train_inpainting_turbrot_231031_111945/checkpoint/730" // center40
        // "resume_state": "experiments/train_inpainting_turbrot_231101_110846/checkpoint/720" // center50
        // "resume_state": "experiments/train_inpainting_turbrot_231101_112828/checkpoint/720" // center60
        // "resume_state": "experiments/train_inpainting_turbrot_231031_104838/checkpoint/720" // center62
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.turb_dataset", "TurbInpaintDataset"], // import Dataset() class / function(not recommend) from data.turb_dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "dataset_path": "datasets/turbrot/TURB-Rot_new-data_module_diffusion.h5",
                    "dataset_name": "train",
                    "data_len": -1,
                    "mask_config": {
                        // "mask_mode": "hybrid"
                        // "mask_mode": "center"
                        "mask_mode": "center8"
                        // "mask_mode": "center16"
                        // "mask_mode": "center24"
                        // "mask_mode": "center32"
                        // "mask_mode": "center40"
                        // "mask_mode": "center50"
                        // "mask_mode": "center60"
                        // "mask_mode": "center62"
                    }
                } 
            },
            "dataloader":{
                "validation_split": 64, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 64, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 64, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": ["data.turb_dataset", "TurbInpaintDataset"], // import Dataset() class / function(not recommend) from data.turb_dataset.py
                "args":{
                    "dataset_path": "datasets/turbrot/TURB-Rot_new-data_module_diffusion.h5",
                    // "dataset_name": "test",
                    // "dataset_name": "test_10381",
                    // "dataset_name": "test_15442",
                    "dataset_name": "test_10926", // center40, idx0
                    // "dataset_name": "test_18843", // center40, idx1
                    "mask_config": {
                        // "mask_mode": "center"
                        // "mask_mode": "center8"
                        // "mask_mode": "center16"
                        // "mask_mode": "center24"
                        // "mask_mode": "center32"
                        "mask_mode": "center40"
                        // "mask_mode": "center50"
                        // "mask_mode": "center60"
                        // "mask_mode": "center62"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 64,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 2,
                        "out_channel": 1,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 5, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : true // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
